/* De-obfuscating the Banks flight simulator from IOCCC 1998. Not finished,
I haven’t tracked down all the math though author has mentioned he used
orthogonal matrices.

Stdin is lists of 3d point coordinates. Each list is an object
drawn connect-a-dot and terminated with 0 0 0. Z upward is negative.

Compile:

gcc -ansi banks.c -lm -lX11 -o banks

Run:

cat horizon.scene pittsburgh.scene | ./banks

Get the .scene data files from the IOCCC site.

http://www0.us.ioccc.org/years.html#1998

Controls:

Arrow keys are the flight stick.
Enter re-centers stick left-right, but not forward-back.
PageUp, PageDn = throttle

HUD on bottom-left:
speed, heading (0 = North), altitude

Math note:

Angles
There are 3 angles in the math. Your compass heading, your
front-back tilt, and your sideways tilt = Tait-Bryan
angles typical in aerospace math. Also called yaw, pitch, and roll.
The Z axis is negative upward. That’s called left-handed coordinates.
The rotation matrix assumes that.

The rotation matrix is not shown in final form in the wiki article I cite,
so let’s derive it:

cx = cos(x) and so on. x=sideTilt, y=forwardTilt, z=compass

1 0 0 cy 0 -sy cz sz 0

0 cx sx * 0 1 0 * -sz cz 0

0 -sx cx sy 0 cy 0 0 1

cy 0 -sy cz sz 0

sx*sy cx sx*cy * -sz cz 0

cx*sy -sx cx*cy 0 0 1

cy*cz cy*sz -sy

sx*sy*cz-cx*sz sx*sy*sz+cx*cz sx*cy

cx*sy*cz+sx*sz cx*sy*sz-sx*cz cx*cy


It is shown in section 2.2.1 “Euler Angles” of banks1
references

wiki1 = en.wikipedia.org/wiki/Perspective_transform#Perspective_projection
wiki2 = https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix
banks1 = “A DISCUSSION OF METHODS OF REAL-TIME AIRPLANE FLIGHT SIMULATION”
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.510.7499&rep=rep1&type=pdf

Obfuscation notes.

The original program has some tricky syntax.

Forms like –*(DN -N? N-DT ?N== RT?&u: & W:&h:&J )
are nested x ? y :z that return the address of a variable that
gets de-referenced by the * and finally decremented.

A comma like in c += (I = M / l, l * H + I * M + a * X) * _;

makes a sequence of statements. The last one is the value of the

(…) list.

*/

#include "banks.h"
#include "global.h"
#include "palette.h"
#include "wasmmath.h"
#include "wasm4.h"
#include "miscfuncs.h"
#include "cppfuncs.h"
#include "geometry.h"

/* Variables renamed from original program.

_ -> timeDelta

A -> gravityAccel
a -> R32, a still used in another case.
B -> sin_forwardTilt
C -> y and integerConvert.
c -> airplaneY.
CS -> Enter
D -> worldX_rel and cos_sideTilt and Dz, D still used for other cases.
DN -> Down
DT -> Throttle_Down
E -> worldY_rel and sin_sideTilt, E still used for other cases.
H -> R12, H still used in another case.
h -> speed.
I -> R22, I still used in another case.
i -> airplaneZ.
IT -> Throttle_Up
J -> up_down.
j -> forwardTiltRadians. Airplane’s front-back tilt angle
in radians. 0 if plane is level, increases negative if dive or
positive if climb.

K -> accel and cos_forwardTilt and Dx.
L -> airplaneX.
l -> speedFeet.
LT -> Left.
m -> R11, m still used in another case.
N -> prevX, N still used for other cases.
n -> worldX.
O -> compassRadians
o -> sideTiltRadians. Airplane’s sideways tilt angle in radians.
It’s 0 if plane is level, increases positive if plane spins right
or negative if spin left. Keeps growing beyond 2pi if plane keeps
spinning.

P -> R21, P still used in another case.
p -> idx and speedKnots.
q -> x.
r -> R23.
RT -> Right
s -> worldZ.
T -> worldZ_rel and sin_compass, T still used for other cases.
t -> R31, t still used in another case.
U -> prevY.
u -> left_right.
UP -> Up
W -> cos_compass and Dy, W still used for other cases.
w -> worldY.
y -> num_pts.
Z -> R33.

*/

double  airplaneX, 
        sideTiltRadians, 
        P, 
        timeDelta = dt, 
        T, Z, 
        D = 1, 
        d, 
        E, 
        speed = 8, 
        I, 
        up_down, 
        accel, 
        M, m, 
        compassRadians;

double  forwardTiltRadians = 33e-3, 
        airplaneZ = 1E3, 
        t, 
        left_right, 
        v, W, 
        S = 74.5, 
        speedFeet = 221, 
        X = 7.26;

double  a, 
        gravityAccel = 32.2 /*ft/sec^2*/,
        airplaneY, 
        F, H;

double  cos_compass, 
        cos_forwardTilt, 
        cos_sideTilt = 1, 
        Dx, Dy, Dz, 
        R11, R12, R13, R21, 
        R22, R23, R31, R32, 
        R33, 
        worldX_rel, 
        worldY_rel,
        worldZ_rel, 
        sin_compass, 
        sin_forwardTilt, 
        sin_sideTilt;

int     N, x, 
        integerConvert, 
        num_pts, 
        speedKnots, 
        idx;

int     prevX, 
        prevY, 
        y;

int8_t colors[999];
float worldX[999],worldY[999],worldZ[999];

char infoStr[52];

double mapX, mapY, mapZ;
int8_t banksview;


void bankssetup(const int8_t location)
{
    airplaneX = 0;
    airplaneY = 0;
    airplaneZ = 1E3;
    compassRadians = 0;
    sideTiltRadians = 0;
    P = 0;
    D = 1;
    speed = 8;
    forwardTiltRadians = 33e-3;
    S = 74.5;
    speedFeet = 221;
    X = 7.26;
    prevX = 0;
    prevY = 0;
    up_down = 0;
    left_right = 0;
    M = 0;
    m = 0;
    E = 0;
    T = 0;
    t = 0;
    H = 0;
    I = 0;
    a = 0;
    d = 0;
    v = 0;
    W = 0;
    F = 0;
    accel = 0;

    cos_compass=0;
    sin_compass=0;
    cos_forwardTilt=0;
    sin_forwardTilt=0;
    cos_sideTilt=1;
    sin_sideTilt=0;

    banksview=0;
    mapX=0;
    mapY=0;
    mapZ=25000;

    // list of points to load x,y,z arrays
    num_pts=0;
    float horizonpoints[]={1000000,0,0,951057,309017,0,809017,587785,0,587785,809017,0,309017,951057,0,0,1000000,0,-309017,951057,0,-587785,809017,0,-809017,587785,0,-951057,309017,0,-1e+06,0,0,-951057,-309017,0,-809017,-587785,0,-587785,-809017,0,-309017,-951057,0,0,-1000000,0,309017,-951057,0,587785,-809017,0,809017,-587785,0,951057,-309017,0,1000000,0,0,0,0,0};
    float mountainspoints[]={1e+06,0,-18084,987688,156434,-15630,951056,309016,-201,891006,453990,5139,809017,587785,24594,707106,707106,-19208,587785,809016,-21229,453990,891006,-15010,309017,951056,-13161,156434,987688,20032,0,999999,-20092,-156434,987688,-7521,-309016,951056,18472,-453990,891006,8668,-587785,809017,-12963,-707106,707106,-22986,-809016,587785,-19944,-891006,453990,15048,-951056,309017,20336,-987688,156434,6819,-999999,0,13015,-987688,-156434,7485,-951056,-309016,-15857,-891006,-453990,6584,-809017,-587785,21741,-707106,-707106,-1338,-587785,-809016,-1247,-453990,-891006,2410,-309017,-951056,14432,-156434,-987688,12342,0,-999999,5533,156434,-987688,2973,309016,-951056,21713,453990,-891006,-19668,587785,-809017,-16888,707106,-707106,21307,809016,-587785,-13876,891006,-453990,-13116,951056,-309017,-18702,987688,-156434,-2036,1e+06,0,-18084,0,0,0};
    float pittsburghpoints[]={-4851,33852,0,-5301,32379,0,-5487,31325,0,-5115,30101,0,-4014,29062,0,-2573,28675,0,-1498,28633,0,-423,28592,0,651,28551,0,1790,27985,0,2929,27419,0,3632,26603,0,4334,25786,0,5037,24970,0,5409,23699,0,5781,22428,0,6153,21157,0,5928,20173,0,5704,19189,0,5680,17693,0,5657,16197,0,6122,15255,0,6587,14314,0,7052,13372,0,7517,12431,0,8401,11237,0,8571,11268,0,8982,12710,0,9393,14151,0,9889,15213,0,10385,16275,0,11185,17205,0,11986,18135,0,12787,19065,0,13516,19785,0,14244,20506,0,14973,21227,0,15701,21948,0,16729,22630,0,17757,23312,0,18786,23994,0,19741,24490,0,20697,24986,0,21653,25482,0,22924,26737,0,23420,27677,0,23916,28618,0,24412,29558,0,24893,30907,0,25373,32255,0,0,0,0,-5890,33991,0,-6083,32666,0,-6277,31341,0,-5936,29822,0,-4557,28380,0,-2836,27838,0,-1756,27796,0,-676,27755,0,403,27714,0,1689,27233,0,2658,26427,0,3627,25621,0,4185,24668,0,4743,23715,0,4983,22475,0,5223,21235,0,5073,20155,0,4923,19075,0,4774,17995,0,4758,16833,0,4743,15670,0,5266,14779,0,5789,13888,0,6312,12996,0,6835,12105,0,7445,11160,0,8054,10214,0,8664,9269,0,9362,7471,0,10049,6680,0,10736,5890,0,11423,5099,0,12282,4274,0,13140,3450,0,13999,2625,0,14858,1801,0,15717,976,0,16972,573,0,18197,1007,0,18631,1550,0,19623,1472,0,20599,1069,0,21917,-124,0,0,0,0,22707,620,0,21343,1875,0,20049,2348,0,18755,2821,0,17786,3410,0,16817,3999,0,15748,4611,0,14678,5223,0,13632,5332,0,12586,5440,0,11578,6262,0,10431,7657,0,9842,9114,0,9455,11051,0,9594,11981,0,10075,13857,0,10586,14911,0,11098,15965,0,12152,17329,0,13004,18160,0,13857,18992,0,14709,19824,0,15593,20320,0,16476,20816,0,17360,21312,0,18135,22041,0,18910,22769,0,19741,23343,0,20573,23916,0,21405,24490,0,22482,25443,0,23560,26396,0,24288,27435,0,25017,28473,0,25347,29455,0,25678,30436,0,26009,31418,0,26210,32767,0,26412,34115,0,0,0,0,6525,21638,-30,6335,20611,-30,6145,19584,-30,5955,18557,-30,5766,17530,-30,5797,16259,-30,6401,16523,-30,7540,16918,-30,8680,17313,-30,9594,17825,-30,10462,17747,-30,11353,16941,-30,12245,16135,-30,12973,17019,-30,0,0,0,10385,17577,-30,9625,17654,-30,8742,17251,-30,7571,16848,-30,6401,16445,-30,5828,16182,-30,6296,15236,-30,6765,14291,-30,7234,13345,-30,7703,12400,-30,8881,12570,-30,10059,12245,-30,10788,12849,-30,11160,14678,-30,12152,15996,-30,11268,16786,-30,10385,17577,-30,10385,17577,-30,0,0,0,10323,13903,-30,9331,14182,-30,9346,14229,-30,10338,13950,-30,10323,13903,-30,10323,13903,-30,0,0,0,10571,14430,-30,9579,14709,-30,9594,14756,-30,10586,14477,-30,10571,14430,-30,10571,14430,-30,0,0,0,10757,14880,-30,9765,15159,-30,9780,15205,-30,10772,14926,-30,10757,14880,-30,10757,14880,-30,0,0,0,0,0,0,8602,16492,-30,8602,16492,-841,8525,16678,-841,8602,16492,-570,8525,16678,-570,8602,16492,-300,8525,16678,-300,8602,16492,-30,8525,16678,-30,8525,16678,-841,8711,16647,-841,8525,16678,-570,8711,16647,-570,8525,16678,-300,8711,16647,-300,8525,16678,-30,8711,16647,-30,8711,16647,-841,8602,16492,-841,8711,16647,-570,8602,16492,-570,8711,16647,-300,8602,16492,-300,8711,16647,-30,8602,16492,-30,8602,16492,-841,8602,16492,-841,8602,16492,-570,8602,16492,-570,8602,16492,-300,8602,16492,-300,8602,16492,-30,8602,16492,-30,0,0,0,7905,16151,-30,7905,16151,-725,7827,16182,-725,7905,16151,-377,7827,16182,-377,7905,16151,-30,7827,16182,-30,7827,16182,-725,7781,16275,-725,7827,16182,-377,7781,16275,-377,7827,16182,-30,7781,16275,-30,7781,16275,-725,7812,16337,-725,7781,16275,-377,7812,16337,-377,7781,16275,-30,7812,16337,-30,7812,16337,-725,7889,16383,-725,7812,16337,-377,7889,16383,-377,7812,16337,-30,7889,16383,-30,7889,16383,-725,7967,16352,-725,7889,16383,-377,7967,16352,-377,7889,16383,-30,7967,16352,-30,7967,16352,-725,8013,16259,-725,7967,16352,-377,8013,16259,-377,7967,16352,
    -30,8013,16259,-30,8013,16259,-725,7982,16182,-725,8013,16259,-377,7982,16182,-377,8013,16259,-30,7982,16182,-30,7982,16182,-725,7905,16151,-725,7982,16182,-377,7905,16151,-377,7982,16182,-30,7905,16151,-30,7905,16151,-725,7905,16151,-725,7905,16151,-377,7905,16151,-377,7905,16151,-30,7905,16151,-30,0,0,0,8246,13082,-30,8246,13082,-250,8277,13159,-250,8246,13082,-30,8277,13159,-30,8277,13159,-250,8556,13082,-250,8277,13159,-30,8556,13082,-30,8556,13082,-250,8525,13004,-250,8556,13082,-30,8525,13004,-30,8525,13004,-250,8246,13082,-250,8525,13004,-30,8246,13082,-30,8246,13082,-250,8246,13082,-250,8246,13082,-30,8246,13082,-30,0,0,0,8416,13981,-30,8416,13981,-450,8478,14151,-450,8416,13981,-240,8478,14151,-240,8416,13981,-30,8478,14151,-30,8478,14151,-450,8649,14089,-450,8478,14151,-240,8649,14089,-240,8478,14151,-30,8649,14089,-30,8649,14089,-450,8587,13919,-450,8649,14089,-240,8587,13919,-240,8649,14089,-30,8587,13919,-30,8587,13919,-450,8416,13981,-450,8587,13919,-240,8416,13981,-240,8587,13919,-30,8416,13981,-30,8416,13981,-450,8416,13981,-450,8416,13981,-240,8416,13981,-240,8416,13981,-30,8416,13981,-30,0,0,0,7657,13640,-30,7657,13640,-630,7595,13795,-630,7657,13640,-330,7595,13795,-330,7657,13640,-30,7595,13795,-30,7595,13795,-630,7750,13857,-630,7595,13795,-330,7750,13857,-330,7595,13795,-30,7750,13857,-30,7750,13857,-630,7812,13702,-630,7750,13857,-330,7812,13702,-330,7750,13857,-30,7812,13702,-30,7812,13702,-630,7657,13640,-630,7812,13702,-330,7657,13640,-330,7812,13702,-30,7657,13640,-30,7657,13640,-630,7657,13640,-630,7657,13640,-330,7657,13640,-330,7657,13640,-30,7657,13640,-30,0,0,0,6882,15267,-30,6882,15267,-600,6820,15422,-600,6882,15267,-410,6820,15422,-410,6882,15267,-220,6820,15422,-220,6882,15267,-30,6820,15422,-30,6820,15422,-600,6975,15484,-600,6820,15422,-410,6975,15484,-410,6820,15422,-220,6975,15484,-220,6820,15422,-30,6975,15484,-30,6975,15484,-600,7037,15329,-600,6975,15484,-410,7037,15329,-410,6975,15484,-220,7037,15329,-220,6975,15484,-30,7037,15329,-30,7037,15329,-600,6882,15267,-600,7037,15329,-410,6882,15267,-410,7037,15329,-220,6882,15267,-220,7037,15329,-30,6882,15267,-30,6882,15267,-600,6882,15267,-600,6882,15267,-410,6882,15267,-410,6882,15267,-220,6882,15267,-220,6882,15267,-30,6882,15267,-30,0,0,0,8339,14461,-30,8339,14461,-500,8261,14647,-500,8339,14461,-265,8261,14647,-265,8339,14461,-30,8261,14647,-30,8261,14647,-500,8401,14709,-500,8261,14647,-265,8401,14709,-265,8261,14647,-30,8401,14709,-30,8401,14709,-500,8478,14523,-500,8401,14709,-265,8478,14523,-265,8401,14709,-30,8478,14523,-30,8478,14523,-500,8339,14461,-500,8478,14523,-265,8339,14461,-265,8478,14523,-30,8339,14461,-30,8339,14461,-500,8339,14461,-500,8339,14461,-265,8339,14461,-265,8339,14461,-30,8339,14461,-30,0,0,0,7440,13500,-30,7440,13500,-350,7300,13438,-350,7440,13500,-190,7300,13438,-190,7440,13500,-30,7300,13438,-30,7300,13438,-350,7223,13609,-350,7300,13438,-190,7223,13609,-190,7300,13438,-30,7223,13609,-30,7223,13609,-350,7362,13671,-350,7223,13609,-190,7362,13671,-190,7223,13609,-30,7362,13671,-30,7362,13671,-350,7440,13500,-350,7362,13671,-190,7440,13500,-190,7362,13671,-30,7440,13500,-30,7440,13500,-350,7440,13500,-350,7440,13500,-190,7440,13500,-190,7440,13500,-30,7440,13500,-30,0,0,0,7192,11547,0,7192,11547,-30,7292,11698,-151,7393,11849,-191,7494,12000,-151,7595,12152,-30,7595,12152,0,0,0,0,7269,11501,0,7269,11501,-30,7366,11652,-149,7463,11803,-189,7560,11954,-149,7657,12105,-30,7657,12105,0,0,0,0,5688,14198,0,5688,14198,-80,5866,14291,-130,6223,14477,-30,6401,14570,-30,6223,14477,-130,5866,14291,-30,5688,14198,-80,0,0,0,6401,14570,-30,6401,14570,0,0,0,0,6370,14632,0,6370,14632,-80,6192,14539,-130,5835,
    14353,-30,5657,14260,-30,5835,14353,-130,6192,14539,-30,6370,14632,-80,0,0,0,5657,14260,-30,5657,14260,0,0,0,0,9641,12369,0,9641,12369,-30,9482,12411,-139,9323,12454,-176,9164,12496,-139,9005,12539,-30,9005,12539,0,0,0,0,9610,12260,0,9610,12260,-30,9451,12303,-139,9292,12345,-176,9133,12388,-139,8974,12431,-30,8974,12431,0,0,0,0,10168,13950,-30,10092,13971,-60,10016,13993,-150,9902,14025,-60,9788,14058,-35,9674,14091,-60,9560,14123,-150,9484,14145,-60,9408,14167,-30,0,0,0,10016,13993,-150,10016,13993,0,0,0,0,9560,14123,-150,9560,14123,0,0,0,0,10183,13996,-30,10107,14018,-60,10031,14039,-150,9917,14072,-60,9803,14105,-35,9689,14137,-60,9575,14170,-150,9499,14191,-60,9424,14213,-30,0,0,0,10031,14039,-150,10031,14039,0,0,0,0,9575,14170,-150,9575,14170,0,0,0,0,10369,14492,-30,10296,14512,-60,10223,14532,-150,10114,14563,-60,10005,14593,-35,9895,14623,-60,9786,14653,-150,9713,14673,-60,9641,14694,-30,0,0,0,10223,14532,-150,10223,14532,0,0,0,0,9786,14653,-150,9786,14653,0,0,0,0,10385,14539,-30,10312,14559,-60,10239,14579,-150,10130,14609,-60,10020,14639,-35,9911,14669,-60,9802,14700,-150,9729,14720,-60,9656,14740,-30,0,0,0,10239,14579,-150,10239,14579,0,0,0,0,9802,14700,-150,9802,14700,0,0,0,0,10602,14926,-30,10526,14948,-60,10450,14969,-150,10336,15002,-60,10222,15035,-35,10108,15067,-60,9994,15100,-150,9918,15121,-60,9842,15143,-30,0,0,0,10450,14969,-150,10450,14969,0,0,0,0,9994,15100,-150,9994,15100,0,0,0,0,10617,14973,-30,10541,14994,-60,10465,15016,-150,10351,15048,-60,10237,15081,-35,10123,15114,-60,10009,15146,-150,9933,15168,-60,9858,15190,-30,0,0,0,10465,15016,-150,10465,15016,0,0,0,0,10009,15146,-150,10009,15146,0,0,0,0,8416,11640,0,8277,11749,0,8385,11873,0,8509,11764,0,8416,11640,0,8416,11640,0,0,0,0,6432,21638,-30,6246,20626,-30,6060,19615,-30,5874,18603,-30,5688,17592,-30,5735,16213,-30,4107,15314,-30,4138,15236,-30,5766,16151,-30,6479,14694,-30,5099,13965,-30,5130,13903,-30,6510,14632,-30,7044,13531,-30,7579,12431,-30,7579,12136,-30,6789,10943,-30,6851,10881,-30,7781,12291,-30,8866,12462,-30,10106,12152,-30,10819,11516,-30,10839,10493,-30,10860,9470,-30,10881,8447,-30,11051,7827,-30,9300,7037,-30,9346,6959,-30,11098,7750,-30,11532,7083,-30,12198,6680,-30,0,0,0,12260,6820,-30,11640,7223,-30,11253,7812,-30,11051,8509,-30,11016,9567,-30,10981,10625,-30,10946,11683,-30,10912,12741,-30,11284,14601,-30,12183,15779,-30,13082,16957,-30,0,0,0,10788,11702,-30,10199,12198,-30,10757,12663,-30,10788,11702,-30,10788,11702,-30,0,0,0,10524,7579,0,10524,7579,-30,10261,7463,-222,9997,7347,-286,9734,7230,-222,9470,7114,-30,9470,7114,0,0,0,0,10602,7517,0,10602,7517,-30,10338,7401,-222,10075,7285,-286,9811,7168,-222,9548,7052,-30,9548,7052,0,0,0,0,16352,1581,0,15558,2305,0,14763,3030,0,13969,3754,0,13175,4479,0,14260,4495,0,15391,4045,0,16316,3410,0,17241,2774,0,18166,2139,0,18150,1720,0,17670,1457,0,16352,1581,0,16352,1581,0,0,0,0,20227,976,-30,20754,2402,-30,20692,2418,-30,20165,1038,-30,20227,976,-30,20227,976,-30,0,0,0,16724,21018,0,17507,21700,0,18290,22382,0,18150,22521,0,17088,21979,0,16027,21436,0,14802,20181,0,15763,20599,0,16724,21018,0,16724,21018,0,0,0,0,12400,17019,-30,11408,17949,-30,11470,17980,-30,12446,17050,-30,12400,17019,-30,12400,17019,-30,0,0,0,16414,20553,-30,15624,21963,-30,15686,22025,-30,16476,20599,-30,16414,20553,-30,16414,20553,-30,0,0,0,19654,23002,-30,18693,24242,-30,18770,24288,-30,19747,23048,-30,19654,23002,-30,19654,23002,-30,0,0,0,5704,17887,-30,4371,18228,-30,4402,18290,-30,5750,17933,-30,5704,17887,-30,5704,17887,-30,0,0,0,6138,22521,-30,4836,22335,-30,4836,22444,-30,6138,22614,-30,6138,22521,-30,6138,22521,-30,0,0,0,-4913,32472,-30,-6463,32643,-30,-6401,32736,-30,-4944,32581,-30,-4913,
    32472,-30,-4913,32472,-30,0,0,0,26365,31976,-30,24939,32302,-30,24986,32410,-30,26412,32069,-30,26365,31976,-30,26365,31976,-30,0,0,0,0,0,0};
    float pyramidspoints[]={6511,-1785,-30,6267,-952,-30,7095,-739,-30,7339,-1571,-30,6511,-1785,-30,6803,-1262,-577,7095,-739,-30,0,0,0,6267,-952,-30,6803,-1262,-577,7339,-1571,-30,0,0,0,24046,-16204,-30,23575,-15543,-30,24236,-15072,-30,24707,-15732,-30,24046,-16204,-30,24141,-15638,-546,24236,-15072,-30,0,0,0,23575,-15543,-30,24141,-15638,-546,24707,-15732,-30,0,0,0,26090,-16254,-30,25960,-16064,-30,26150,-15934,-30,26280,-16124,-30,26090,-16254,-30,26120,-16094,-176,26150,-15934,-30,0,0,0,25960,-16064,-30,26120,-16094,-176,26280,-16124,-30,0,0,0,41193,-15685,-30,40827,-15165,-30,41348,-14799,-30,41714,-15320,-30,41193,-15685,-30,41271,-15242,-434,41348,-14799,-30,0,0,0,40827,-15165,-30,41271,-15242,-434,41714,-15320,-30,0,0,0,17255,-4645,-30,16887,-4140,-30,17410,-3759,-30,17776,-4280,-30,17255,-4645,-30,17332,-4206,-434,17410,-3759,-30,0,0,0,16887,-4140,-30,17332,-4206,-434,17776,-4280,-30,0,0,0,45863,-17213,-30,45495,-16708,-30,46018,-16327,-30,46383,-16848,-30,45863,-17213,-30,45940,-16774,-434,46018,-16327,-30,0,0,0,45495,-16708,-30,45940,-16774,-434,46383,-16848,-30,0,0,0,66583,-8805,-30,66112,-8145,-30,66772,-7673,-30,67243,-8334,-30,66583,-8805,-30,66678,-8239,-546,66772,-7673,-30,0,0,0,66112,-8145,-30,66678,-8239,-546,67243,-8334,-30,0,0,0,75995,-18851,-30,76008,-18777,-150,75338,-17822,-150,75264,-17810,-30,75995,-18851,-30,77039,-18105,-30,76008,-18777,-150,76964,-18092,-150,0,0,0,77039,-18105,-30,76292,-17062,-30,75264,-17810,-30,0,0,0,76964,-18092,-150,76280,-17136,-150,75338,-17822,-150,0,0,0,76280,-17136,-150,76292,-17062,-30,0,0,0,76021,-18702,-150,76033,-18628,-270,75485,-17847,-270,75412,-17835,-150,76021,-18702,-150,76890,-18080,-150,76033,-18628,-270,76816,-18068,-270,0,0,0,76890,-18080,-150,76268,-17211,-150,75412,-17835,-150,0,0,0,76816,-18068,-270,76256,-17285,-270,75485,-17847,-270,0,0,0,76256,-17285,-270,76268,-17211,-150,0,0,0,76046,-18553,-270,76059,-18479,-391,75632,-17871,-391,75559,-17859,-270,76046,-18553,-270,76742,-18055,-270,76059,-18479,-391,76667,-18043,-391,0,0,0,76742,-18055,-270,76244,-17360,-270,75559,-17859,-270,0,0,0,76667,-18043,-391,76232,-17435,-391,75632,-17871,-391,0,0,0,76232,-17435,-391,76244,-17360,-270,0,0,0,76072,-18404,-391,76084,-18330,-511,75780,-17896,-511,75706,-17884,-391,76072,-18404,-391,76593,-18031,-391,76084,-18330,-511,76519,-18019,-511,0,0,0,76593,-18031,-391,76220,-17509,-391,75706,-17884,-391,0,0,0,76519,-18019,-511,76208,-17584,-511,75780,-17896,-511,0,0,0,76208,-17584,-511,76220,-17509,-391,0,0,0,76097,-18255,-511,76110,-18180,-632,75927,-17920,-632,75853,-17908,-511,76097,-18255,-511,76445,-18006,-511,76110,-18180,-632,76370,-17994,-632,0,0,0,76445,-18006,-511,76196,-17658,-511,75853,-17908,-511,0,0,0,76370,-17994,-632,76184,-17733,-632,75927,-17920,-632,0,0,0,76184,-17733,-632,76196,-17658,-511,0,0,0,76122,-18106,-632,76135,-18031,-752,76074,-17945,-752,76000,-17932,-632,76122,-18106,-632,76296,-17982,-632,76135,-18031,-752,76222,-17969,-752,0,0,0,76296,-17982,-632,76172,-17808,-632,76000,-17932,-632,0,0,0,76222,-17969,-752,76160,-17882,-752,76074,-17945,-752,0,0,0,76160,-17882,-752,76172,-17808,-632,0,0,0,86332,-23736,-30,85964,-23231,-30,86486,-22850,-30,86852,-23371,-30,86332,-23736,-30,86408,-23297,-434,86486,-22850,-30,0,0,0,85964,-23231,-30,86408,-23297,-434,86852,-23371,-30,0,0,0,46429,-18090,-30,46299,-17900,-30,46489,-17770,-30,46619,-17960,-30,46429,-18090,-30,46459,-17930,-176,46489,-17770,-30,0,0,0,46299,-17900,-30,46459,-17930,-176,46619,-17960,-30,0,0,0,97292,-27848,-30,98318,-27115,-30,99051,-28141,-30,98025,-28874,-30,97292,-27848,-30,98171,-27994,-832,99051,-28141,-30,0,0,0,98318,-27115,-30,98171,-27994,-832,98025,-28874,-30,0,0,0,99469,
    -23347,-30,98998,-22687,-30,99659,-22216,-30,100130,-22876,-30,99469,-23347,-30,99564,-22782,-546,99659,-22216,-30,0,0,0,98998,-22687,-30,99564,-22782,-546,100130,-22876,-30,0,0,0,97982,-24924,-30,98832,-24323,-30,99434,-25173,-30,98583,-25775,-30,97982,-24924,-30,98708,-25049,-692,99434,-25173,-30,0,0,0,98832,-24323,-30,98708,-25049,-692,98583,-25775,-30,0,0,0};
    float riverpoints[]={2114,800,0,2687,1012,0,3259,1225,0,3831,1437,0,4371,1643,0,4911,1850,0,5451,2056,0,5994,2188,0,6536,2319,0,7079,2451,0,7622,2582,0,8209,2583,0,8795,2583,0,9382,2583,0,9969,2584,0,10506,2538,0,11043,2492,0,11580,2446,0,12117,2400,0,12654,2354,0,13191,2308,0,13727,2263,0,14311,2479,0,14894,2695,0,15477,2911,0,16032,2778,0,16588,2646,0,17143,2514,0,17698,2381,0,18254,2249,0,18809,2117,0,19359,2161,0,19909,2206,0,20459,2251,0,21009,2295,0,21580,2303,0,22151,2311,0,22722,2319,0,23292,2327,0,23863,2335,0,24377,2205,0,24891,2074,0,25405,1944,0,25919,1813,0,26232,1326,0,26545,839,0,26857,352,0,27564,144,0,28270,-63,0,28746,-354,0,29222,-644,0,29698,-935,0,30195,-1072,0,30693,-1210,0,31190,-1347,0,31750,-1202,0,32310,-1057,0,32871,-912,0,33431,-767,0,33828,-421,0,34226,-75,0,34624,270,0,35297,270,0,35970,270,0,36578,138,0,37185,7,0,37571,-367,0,37957,-742,0,38305,-1111,0,38652,-1480,0,38865,-1972,0,39078,-2463,0,39658,-2795,0,40205,-2855,0,40752,-2916,0,41324,-2690,0,41895,-2465,0,42636,-2428,0,42638,-2412,0,43131,-2528,0,43623,-2643,0,44139,-2872,0,44655,-3100,0,45171,-3329,0,45687,-3557,0,46142,-3788,0,46598,-4018,0,47053,-4249,0,47509,-4479,0,47965,-4710,0,48420,-4940,0,48978,-5179,0,49535,-5417,0,50093,-5655,0,50650,-5893,0,51171,-6091,0,51691,-6289,0,52211,-6487,0,52731,-6684,0,53250,-6701,0,53768,-6717,0,54287,-6734,0,54806,-6750,0,55324,-6767,0,55843,-6783,0,56362,-6800,0,56873,-6702,0,57384,-6604,0,57895,-6507,0,58407,-6409,0,58918,-6311,0,59579,-6398,0,60240,-6485,0,60901,-6572,0,61338,-6873,0,61776,-7174,0,62214,-7476,0,62932,-7662,0,63649,-7848,0,64173,-8057,0,64697,-8265,0,65221,-8474,0,65624,-8836,0,66027,-9197,0,66602,-9340,0,67177,-9483,0,67810,-9430,0,68444,-9378,0,68978,-9462,0,69513,-9547,0,70047,-9631,0,70582,-9716,0,71116,-9800,0,71651,-9885,0,72185,-9970,0,72720,-10054,0,73255,-10139,0,73789,-10223,0,74324,-10308,0,74828,-10478,0,75332,-10648,0,75837,-10818,0,76341,-10988,0,76846,-11158,0,77350,-11329,0,77855,-11499,0,78359,-11669,0,78758,
    -12100,0,79157,-12531,0,79556,-12963,0,80006,-13234,0,80456,-13506,0,80906,-13777,0,81355,-14049,0,81805,-14320,0,82255,-14591,0,82807,-14806,0,83360,-15021,0,83912,-15236,0,84464,-15451,0,85016,-15665,0,85522,-15740,0,86028,-15815,0,86534,-15891,0,87040,-15966,0,87546,-16041,0,88052,-16116,0,88558,-16191,0,89172,-16276,0,89786,-16362,0,90400,-16448,0,91014,-16534,0,91601,-16424,0,92187,-16314,0,92774,-16204,0,93361,-16094,0,93916,-16151,0,94472,-16207,0,95027,-16264,0,95546,-16284,0,96065,-16304,0,96584,-16325,0,97103,-16345,0,97621,-16365,0,98140,-16385,0,98611,-16597,0,99083,-16809,0,99554,-17021,0,100083,-17023,0,100612,-17025,0,101142,-17027,0,101671,-17029,0,102200,-17031,0,102729,-17034,0,103258,-17036,0,103788,-17038,0,104317,-17040,0,104846,-17042,0,105375,-17044,0,105904,-17046,0,0,0,0,2162,465,0,2734,677,0,3306,889,0,3878,1102,0,4401,1258,0,4923,1415,0,5446,1571,0,5998,1713,0,6550,1856,0,7102,1998,0,7654,2140,0,8223,2185,0,8793,2231,0,9363,2277,0,9933,2323,0,10498,2255,0,11063,2187,0,11628,2120,0,12193,2052,0,12759,1984,0,13324,1916,0,13889,1849,0,14383,1940,0,14877,2032,0,15371,2123,0,15865,2215,0,16455,2139,0,17046,2062,0,17636,1986,0,18226,1910,0,18817,1834,0,19430,1895,0,20044,1955,0,20657,2016,0,21197,1992,0,21736,1969,0,22275,1946,0,22815,1923,0,23354,1900,0,23893,1877,0,24403,1566,0,24912,1255,0,25422,944,0,25885,597,0,26348,251,0,26811,-94,0,27425,-399,0,28040,-704,0,28486,-1100,0,28931,-1496,0,29377,-1892,0,29988,-1852,0,30598,-1812,0,31209,-1772,0,31785,-1571,0,32361,-1369,0,32937,-1168,0,33512,-967,0,34119,-597,0,34727,-228,0,35398,-181,0,36070,-134,0,36579,-299,0,37088,-464,0,37479,-800,0,37871,-1137,0,38329,-1889,0,38658,-2561,0,38931,-2959,0,39401,-3181,0,39994,-3193,0,40587,-3206,0,41154,-3066,0,41721,-2926,0,42286,-2919,0,42850,-2911,0,43446,-3127,0,44042,-3344,0,44578,-3575,0,45115,-3806,0,45651,-4038,0,46108,-4294,0,46565,-4551,0,47022,-4808,0,47480,-5065,0,47937,-5322,0,48394,-5578,0,48957,-5806,0,49520,-6033,0,50083,-6260,
    0,50646,-6487,0,51144,-6619,0,51642,-6752,0,52140,-6884,0,52638,-7016,0,53145,-7033,0,53653,-7050,0,54160,-7067,0,54667,-7084,0,55175,-7101,0,55682,-7119,0,56189,-7136,0,56738,-7062,0,57287,-6988,0,57835,-6915,0,58384,-6841,0,58933,-6767,0,59564,-6876,0,60196,-6985,0,60828,-7094,0,61438,-7485,0,62049,-7875,0,62552,-7971,0,63055,-8068,0,63558,-8164,0,64060,-8458,0,64561,-8752,0,65062,-9047,0,65504,-9304,0,65945,-9561,0,66561,-9804,0,67177,-10046,0,67811,-9876,0,68445,-9707,0,68973,-9801,0,69502,-9895,0,70030,-9989,0,70558,-10083,0,71087,-10177,0,71615,-10271,0,72143,-10365,0,72672,-10459,0,73200,-10553,0,73728,-10647,0,74205,-10818,0,74682,-10989,0,75159,-11160,0,75636,-11331,0,76113,-11502,0,76590,-11673,0,77067,-11843,0,77544,-12014,0,78021,-12185,0,78467,-12581,0,78912,-12977,0,79358,-13373,0,79777,-13661,0,80196,-13949,0,80614,-14237,0,81033,-14525,0,81452,-14813,0,81871,-15101,0,82336,-15302,0,82801,-15502,0,83266,-15703,0,83731,-15903,0,84196,-16104,0,84661,-16304,0,85179,-16361,0,85696,-16418,0,86214,-16474,0,86732,-16531,0,87250,-16587,0,87767,-16644,0,88285,-16700,0,88803,-16757,0,89320,-16814,0,89838,-16870,0,90356,-16927,0,90873,-16983,0,91376,-17028,0,91879,-17074,0,92382,-17119,0,92885,-17164,0,93388,-17209,0,93890,-17254,0,94393,-17299,0,94896,-17344,0,95399,-17389,0,95902,-17435,0,96405,-17480,0,96908,-17525,0,97410,-17570,0,97913,-17615,0,98416,-17660,0,98945,-17654,0,99473,-17647,0,100002,-17640,0,100530,-17633,0,101059,-17627,0,101588,-17620,0,102116,-17613,0,102645,-17606,0,103173,-17600,0,103702,-17593,0,104230,-17586,0,104759,-17579,0,105288,-17573,0,105816,-17566,0,0,0,0,92115,-16718,0,92688,-16767,0,93260,-16816,0,93832,-16864,0,94152,-16705,0,94092,-16462,0,93530,-16337,0,92812,-16440,0,92133,-16705,0,92115,-16718,0,92115,-16718,0,0,0,0,94634,-16835,0,94977,-17071,0,95769,-17228,0,96425,-17179,0,97082,-17130,0,97609,-17274,0,98137,-17418,0,98557,-17210,0,98398,-16891,0,97556,-16758,0,97062,-16595,0,96519,-16730,0,95976,-16866,0,
    95484,-16688,0,94993,-16510,0,94618,-16614,0,94582,-16765,0,94634,-16835,0,94634,-16835,0,0,0,0,24830,1637,0,24832,1762,0,24979,1804,0,25332,1755,0,25641,1617,0,26002,1176,0,26128,845,0,25983,818,0,25463,1126,0,25129,1423,0,24830,1637,0,24830,1637,0,0,0,0,30671,-1587,0,30754,-1443,0,30609,-1360,0,30151,-1280,0,29513,-1144,0,28801,-747,0,28260,-359,0,27538,-39,0,27392,-81,0,27936,-439,0,28549,-759,0,28991,-1181,0,29395,-1535,0,29709,-1641,0,30334,-1650,0,30671,-1587,0,30671,-1587,0,0,0,0};
    float obstaclepoints[]={23374,-1302,-30,23374,-1200,-30,23374,-1099,-30,23374,-998,-30,23374,-897,-30,23374,-796,-30,23374,-695,-30,23374,-594,-30,23374,-493,-30,23374,-392,-30,23374,-291,-30,23374,-190,-30,23374,-89,-30,23374,11,-30,23374,112,-30,23374,213,-30,23374,314,-30,23374,415,-30,23374,516,-30,23374,617,-30,23374,718,-30,23374,819,-30,23374,920,-30,23374,1021,-30,23374,1122,-30,23374,1223,-30,23374,1324,-30,23374,1426,-30,23498,1426,-30,23498,1324,-30,23498,1223,-30,23498,1122,-30,23498,1021,-30,23498,920,-30,23498,819,-30,23498,718,-30,23498,617,-30,23498,516,-30,23498,415,-30,23498,314,-30,23498,213,-30,23498,112,-30,23498,11,-30,23498,-89,-30,23498,-190,-30,23498,-291,-30,23498,-392,-30,23498,-493,-30,23498,-594,-30,23498,-695,-30,23498,-796,-30,23498,-897,-30,23498,-998,-30,23498,-1099,-30,23498,-1200,-30,23498,-1302,-30,23374,-1302,-30,23374,-1302,-30,0,0,0,0,0,0,7502,124,-30,7502,124,-750,7750,124,-750,7502,124,-510,7750,124,-510,7502,124,-270,7750,124,-270,7502,124,-30,7750,124,-30,7750,124,-750,7750,-124,-750,7750,124,-510,7750,-124,-510,7750,124,-270,7750,-124,-270,7750,124,-30,7750,-124,-30,7750,-124,-750,7502,-124,-750,7750,-124,-510,7502,-124,-510,7750,-124,-270,7502,-124,-270,7750,-124,-30,7502,-124,-30,7502,-124,-750,7502,124,-750,7502,-124,-510,7502,124,-510,7502,-124,-270,7502,124,-270,7502,-124,-30,7502,124,-30,7502,124,-750,7502,124,-750,7502,124,-510,7502,124,-510,7502,124,-270,7502,124,-270,7502,124,-30,7502,124,-30,0,0,0,23374,-1054,0,23374,-1054,-30,23374,-496,-402,23374,62,-526,23374,620,-402,23374,1178,-30,23374,1178,0,0,0,0,23498,1178,0,23498,1178,-30,23498,620,-402,23498,62,-526,23498,-496,-402,23498,-1054,-30,23498,-1054,0,0,0,0,18166,0,-30,18166,0,-610,18352,186,-610,18166,0,-320,18352,186,-320,18166,0,-30,18352,186,-30,18352,186,-610,18538,0,-610,18352,186,-320,18538,0,-320,18352,186,-30,18538,0,-30,18538,0,-610,18352,-186,-610,18538,0,-320,18352,-186,-320,18538,0,-30,18352,-186,-30,18352,-186,-610,18166,0,-610,18352,-186,-320,18166,0,-320,18352,-186,-30,18166,0,-30,18166,0,-610,18166,0,-610,18166,
    0,-320,18166,0,-320,18166,0,-30,18166,0,-30,0,0,0,13392,-1364,-30,13392,-1262,-30,13392,-1161,-30,13392,-1060,-30,13392,-959,-30,13392,-858,-30,13392,-757,-30,13392,-656,-30,13392,-555,-30,13392,-454,-30,13392,-353,-30,13392,-252,-30,13392,-151,-30,13392,-50,-30,13392,50,-30,13392,151,-30,13392,252,-30,13392,353,-30,13392,454,-30,13392,555,-30,13392,656,-30,13392,757,-30,13392,858,-30,13392,959,-30,13392,1060,-30,13392,1161,-30,13392,1262,-30,13392,1364,-30,13516,1364,-30,13516,1262,-30,13516,1161,-30,13516,1060,-30,13516,959,-30,13516,858,-30,13516,757,-30,13516,656,-30,13516,555,-30,13516,454,-30,13516,353,-30,13516,252,-30,13516,151,-30,13516,50,-30,13516,-50,-30,13516,-151,-30,13516,-252,-30,13516,-353,-30,13516,-454,-30,13516,-555,-30,13516,-656,-30,13516,-757,-30,13516,-858,-30,13516,-959,-30,13516,-1060,-30,13516,-1161,-30,13516,-1262,-30,13516,-1364,-30,13392,-1364,-30,13392,-1364,-30,0,0,0,13392,-1116,-30,13392,-892,-60,13392,-669,-150,13392,-334,-60,13392,0,-35,13392,334,-60,13392,669,-150,13392,892,-60,13392,1116,-30,0,0,0,13392,-669,-150,13392,-669,0,0,0,0,13392,669,-150,13392,669,0,0,0,0,13516,1116,-30,13516,892,-60,13516,669,-150,13516,334,-60,13516,0,-35,13516,-334,-60,13516,-669,-150,13516,-892,-60,13516,-1116,-30,0,0,0,13516,669,-150,13516,669,0,0,0,0,13516,-669,-150,13516,-669,0,0,0,0,33604,620,-30,33604,620,-1132,33852,620,-1132,33604,620,-856,33852,620,-856,33604,620,-581,33852,620,-581,33604,620,-305,33852,620,-305,33604,620,-30,33852,620,-30,33852,620,-1132,33852,372,-1132,33852,620,-856,33852,372,-856,33852,620,-581,33852,372,-581,33852,620,-305,33852,372,-305,33852,620,-30,33852,372,-30,33852,372,-1132,33604,372,-1132,33852,372,-856,33604,372,-856,33852,372,-581,33604,372,-581,33852,372,-305,33604,372,-305,33852,372,-30,33604,372,-30,33604,372,-1132,33604,620,-1132,33604,372,-856,33604,620,-856,33604,372,-581,33604,620,-581,33604,372,-305,33604,620,-305,33604,372,-30,33604,620,-30,33604,620,-1132,33604,620,-1132,33604,620,-856,33604,620,-856,33604,620,-581,33604,620,-581,33604,620,-305,
    33604,620,-305,33604,620,-30,33604,620,-30,0,0,0,44516,1240,-30,44516,1340,-30,44516,1441,-30,44516,1542,-30,44516,1643,-30,44516,1743,-30,44516,1844,-30,44516,1945,-30,44516,2046,-30,44516,2146,-30,44516,2247,-30,44516,2348,-30,44516,2449,-30,44516,2549,-30,44516,2650,-30,44516,2751,-30,44516,2852,-30,44516,2952,-30,44516,3053,-30,44516,3154,-30,44516,3255,-30,44516,3355,-30,44516,3456,-30,44516,3557,-30,44516,3658,-30,44640,3658,-30,44640,3557,-30,44640,3456,-30,44640,3355,-30,44640,3255,-30,44640,3154,-30,44640,3053,-30,44640,2952,-30,44640,2852,-30,44640,2751,-30,44640,2650,-30,44640,2549,-30,44640,2449,-30,44640,2348,-30,44640,2247,-30,44640,2146,-30,44640,2046,-30,44640,1945,-30,44640,1844,-30,44640,1743,-30,44640,1643,-30,44640,1542,-30,44640,1441,-30,44640,1340,-30,44640,1240,-30,44516,1240,-30,44516,1240,-30,0,0,0,44516,1488,-30,44516,1674,-60,44516,1860,-150,44516,2139,-60,44516,2418,-35,44516,2697,-60,44516,2976,-150,44516,3162,-60,44516,3348,-30,0,0,0,44516,1860,-150,44516,1860,0,0,0,0,44516,2976,-150,44516,2976,0,0,0,0,44640,3348,-30,44640,3162,-60,44640,2976,-150,44640,2697,-60,44640,2418,-35,44640,2139,-60,44640,1860,-150,44640,1674,-60,44640,1488,-30,0,0,0,44640,2976,-150,44640,2976,0,0,0,0,44640,1860,-150,44640,1860,0,0,0,0,48980,3348,-30,48980,3348,-440,49228,3348,-440,48980,3348,-30,49228,3348,-30,49228,3348,-440,49228,2604,-440,49228,3348,-30,49228,2604,-30,49228,2604,-440,48980,2604,-440,49228,2604,-30,48980,2604,-30,48980,2604,-440,48980,3348,-440,48980,2604,-30,48980,3348,-30,48980,3348,-440,48980,3348,-440,48980,3348,-30,48980,3348,-30,0,0,0,53940,1798,-30,53940,1901,-30,53940,2004,-30,53940,2108,-30,53940,2211,-30,53940,2314,-30,53940,2418,-30,53940,2521,-30,53940,2624,-30,53940,2728,-30,53940,2831,-30,53940,2934,-30,53940,3038,-30,53940,3141,-30,53940,3244,-30,53940,3348,-30,53940,3451,-30,53940,3554,-30,53940,3658,-30,54064,3658,-30,54064,3554,-30,54064,3451,-30,54064,3348,-30,54064,3244,-30,54064,3141,-30,54064,3038,-30,54064,2934,-30,54064,2831,-30,54064,2728,-30,54064,2624,-30,54064,
    2521,-30,54064,2418,-30,54064,2314,-30,54064,2211,-30,54064,2108,-30,54064,2004,-30,54064,1901,-30,54064,1798,-30,53940,1798,-30,53940,1798,-30,0,0,0,53940,1984,0,53940,1984,-80,53940,2356,-130,53940,3100,-30,53940,3472,-30,53940,3100,-130,53940,2356,-30,53940,1984,-80,0,0,0,53940,3472,-30,53940,3472,0,0,0,0,54064,3472,0,54064,3472,-80,54064,3100,-130,54064,2356,-30,54064,1984,-30,54064,2356,-130,54064,3100,-30,54064,3472,-80,0,0,0,54064,1984,-30,54064,1984,0,0,0,0,64790,0,-30,64790,0,-580,65100,-248,-580,64790,0,-305,65100,-248,-305,64790,0,-30,65100,-248,-30,65100,-248,-580,65596,372,-580,65100,-248,-305,65596,372,-305,65100,-248,-30,65596,372,-30,65596,372,-580,65286,620,-580,65596,372,-305,65286,620,-305,65596,372,-30,65286,620,-30,65286,620,-580,64790,0,-580,65286,620,-305,64790,0,-305,65286,620,-30,64790,0,-30,64790,0,-580,64790,0,-580,64790,0,-305,64790,0,-305,64790,0,-30,64790,0,-30,0,0,0,73470,-1798,-30,73470,-1696,-30,73470,-1595,-30,73470,-1494,-30,73470,-1393,-30,73470,-1292,-30,73470,-1191,-30,73470,-1090,-30,73470,-989,-30,73470,-888,-30,73470,-787,-30,73470,-686,-30,73470,-585,-30,73470,-484,-30,73470,-383,-30,73470,-282,-30,73470,-181,-30,73470,-80,-30,73470,20,-30,73470,121,-30,73470,222,-30,73470,323,-30,73470,424,-30,73470,525,-30,73470,626,-30,73470,727,-30,73470,828,-30,73470,930,-30,73594,930,-30,73594,828,-30,73594,727,-30,73594,626,-30,73594,525,-30,73594,424,-30,73594,323,-30,73594,222,-30,73594,121,-30,73594,20,-30,73594,-80,-30,73594,-181,-30,73594,-282,-30,73594,-383,-30,73594,-484,-30,73594,-585,-30,73594,-686,-30,73594,-787,-30,73594,-888,-30,73594,-989,-30,73594,-1090,-30,73594,-1191,-30,73594,-1292,-30,73594,-1393,-30,73594,-1494,-30,73594,-1595,-30,73594,-1696,-30,73594,-1798,-30,73470,-1798,-30,73470,-1798,-30,0,0,0,73470,-1550,0,73470,-1550,-30,73470,-992,-402,73470,-434,-526,73470,124,-402,73470,682,-30,73470,682,0,0,0,0,73594,682,0,73594,682,-30,73594,124,-402,73594,-434,-526,73594,-992,-402,73594,-1550,-30,73594,-1550,0,0,0,0};

    int32_t pittsburghcolorrun[]={0,134,PALETTE_BLUE,625,6,PALETTE_WHITE,698,14,PALETTE_GREEN,720,10,PALETTE_GREEN};
    int32_t pyramidscolorrun[]={};
    int32_t mountainscolorrun[]={0,42,PALETTE_GREEN};
    int32_t rivercolorrun[]={0,400,PALETTE_BLUE,401,11,PALETTE_GREEN,413,19,PALETTE_GREEN,433,12,PALETTE_GREEN,446,17,PALETTE_GREEN};

    // first reset all points and colors
    for(int i=0; i<countof(worldX); i++)
    {
        worldX[i]=0;
        worldY[i]=0;
        worldZ[i]=0;
        colors[i]=PALETTE_WHITE;
    }

    num_pts=0;
    if(location==1 || location==3)
    {
        for(int i=0; i<countof(horizonpoints)/3; i++)
        {
            worldX[num_pts]=horizonpoints[(i*3)+0];
            worldY[num_pts]=horizonpoints[(i*3)+1];
            worldZ[num_pts]=horizonpoints[(i*3)+2];
            colors[num_pts]=PALETTE_GREEN;
            num_pts++;
        }
    }
    else
    {
        for(int i=0; i<countof(mountainspoints)/3; i++)
        {
            worldX[num_pts]=mountainspoints[(i*3)+0];
            worldY[num_pts]=mountainspoints[(i*3)+1];
            worldZ[num_pts]=mountainspoints[(i*3)+2];
            colors[num_pts]=PALETTE_GREEN;
            num_pts++;
        }
    }

    const int32_t startidx=num_pts; // start point after horizon

    switch(location)
    {
    case 0:
        for(int i=0; i<countof(pittsburghpoints)/3; i++)
        {
            worldX[num_pts]=pittsburghpoints[(i*3)+0];
            worldY[num_pts]=pittsburghpoints[(i*3)+1];
            worldZ[num_pts]=pittsburghpoints[(i*3)+2];
            num_pts++;
        }
        for(int i=0; i<countof(pittsburghcolorrun)/3; i++)
        {
            for(int j=startidx+pittsburghcolorrun[(i*3)+0]; j<startidx+pittsburghcolorrun[(i*3)+0]+pittsburghcolorrun[(i*3)+1]; j++)
            {
                colors[j]=pittsburghcolorrun[(i*3)+2];
            }
        }
        break;
    case 1:
        for(int i=0; i<countof(pyramidspoints)/3; i++)
        {
            worldX[num_pts]=pyramidspoints[(i*3)+0];
            worldY[num_pts]=pyramidspoints[(i*3)+1];
            worldZ[num_pts]=pyramidspoints[(i*3)+2];
            num_pts++;
        }
        break;
    case 2:
        for(int i=0; i<countof(riverpoints)/3; i++)
        {
            worldX[num_pts]=riverpoints[(i*3)+0];
            worldY[num_pts]=riverpoints[(i*3)+1];
            worldZ[num_pts]=riverpoints[(i*3)+2];
            num_pts++;
        }
        for(int i=0; i<countof(rivercolorrun)/3; i++)
        {
            for(int j=startidx+rivercolorrun[(i*3)+0]; j<startidx+rivercolorrun[(i*3)+0]+rivercolorrun[(i*3)+1]; j++)
            {
                colors[j]=rivercolorrun[(i*3)+2];
            }
        }
        break;
    case 3:
        for(int i=0; i<countof(obstaclepoints)/3; i++)
        {
            worldX[num_pts]=obstaclepoints[(i*3)+0];
            worldY[num_pts]=obstaclepoints[(i*3)+1];
            worldZ[num_pts]=obstaclepoints[(i*3)+2];
            num_pts++;
        }
        break;
    }

}

void drawworld(const FPoint3D pos, const float cos_heading, const float sin_heading, const float cos_pitch, const float sin_pitch, const float cos_roll, const float sin_roll)
{
    /* Next 9 values make up a rotation matrix for a camera transform. See wiki1. */
    R11 = cos_pitch * cos_heading;
    R12 = cos_pitch * sin_heading;
    R13 = -sin_pitch; /* Original code didn’t put this in a variable. */

    R21 = cos_heading * sin_roll * sin_pitch - sin_heading * cos_roll;
    R22 = cos_roll * cos_heading + sin_roll * sin_heading * sin_pitch;

    R23 = sin_roll * cos_pitch;
    R31 = sin_heading * sin_roll + cos_roll * sin_pitch * cos_heading;

    R32 = sin_pitch * sin_heading * cos_roll - sin_roll * cos_heading;
    R33 = cos_roll * cos_pitch;

    Edge e;
    bool prevvalid=false;   // prevX was used in original code to determine if previous point was valid or not, use separate variable now
    /*Loop over points and draw lines.*/

    for (idx = 0; idx < num_pts;)
    {

        /*The world point must be moved so the airplane is the 0,0,0 origin.
        Then the point must be rotated by all 3 angles.
        
        Finally the 3D point must be projected onto the 2D plane of the
        display. All this is the camera transform in

        en.wikipedia.org/wiki/Perspective_transform#Perspective_projection.*/

        /*Shift world object vertex x,y,z relative to airplane as origin.
        The Z line uses + because airplaneZ is upward positive. It has to
        be negated because world Z is upward negative:
        worldZ – -airplaneZ = worldZ + airplaneZ. */

        worldX_rel = worldX[idx] - pos.x;
        worldY_rel = worldY[idx] - pos.y;
        worldZ_rel = worldZ[idx] + pos.z;

        /* Apply the 3 angle rotation matrix. */

        Dx = R11 * worldX_rel + R12 * worldY_rel + R13 * worldZ_rel;
        Dy = R21 * worldX_rel + R22 * worldY_rel + R23 * worldZ_rel;
        Dz = R31 * worldX_rel + R32 * worldY_rel + R33 * worldZ_rel;

        e.p2=e.p1;
        e.p1=FPoint3D(Dx,Dy,Dz);

        /* Point D is now a shifted and rotated world vertex.
        We are looking along the Dx axis, I think. */

        /*0,0,0 signals end of an object. Dy or Dz larger than Dx means point
        is out of range of view (assuming a square display). */

        // don't care if one point is outside screen - line will check both points before drawing
        // -- Dx is positive the direction we're looking, so negative Dx is behind us, we can skip over that point
        if (worldX[idx] + worldY[idx] + worldZ[idx] == 0 /*||
            Dx < _dabs(Dy) ||
            Dx < _dabs(Dz)*/ /*|| Dx<0*/)
        {

            /* Don’t draw this point and set flag to not draw it next time
            through loop. */

            prevvalid=false;
        }
        else
        {

        /* Project 3D point onto 2D plane to be displayed. This will
        make distant objects look smaller. The rotation has us
        looking along the Dx axis, I think. So the farther out Dx
        is, the smaller Dy and Dz become. The wiki1 article has
        Dz as the denominator. Why? Is the article wrong? This
        code is working. */

        /* Window is 400 x 400. */

        //x = Dy / Dx * SCREEN_SIZE + (SCREEN_SIZE/2);
        //y = Dz / Dx * SCREEN_SIZE + (SCREEN_SIZE/2);

        Edge viewedge=e;
        viewedge.ClipToViewport(1.0);

        // need to clamp x at least 1.0 so we don't divide by 0 (when x=0 then there should be no coord scaling, so dividing by 1.0 is needed)
        x = viewedge.p1.y / _max(viewedge.p1.x,1.0) * SCREEN_SIZE + (SCREEN_SIZE/2);
        y = viewedge.p1.z / _max(viewedge.p1.x,1.0) * SCREEN_SIZE + (SCREEN_SIZE/2);
        // recalc prevX in case previous point was 0,0,0
        if(prevvalid==true)
        {
            prevX = viewedge.p2.y / _max(viewedge.p2.x,1.0) * SCREEN_SIZE + (SCREEN_SIZE/2);
            prevY = viewedge.p2.z / _max(viewedge.p2.x,1.0) * SCREEN_SIZE + (SCREEN_SIZE/2);
        }

        /* 1E4 flag prevents drawing first point since we don’t have a line
        until 2nd point is read. It also skips points that fall out of
        range of view. */

            // check if either point is within screen
            // check if line segment intersects screen, both endpoints may be outside screen but line still goes through it
            if (prevvalid==true && e.BehindViewport(1.0)==false && (((prevX>=0 && prevX<SCREEN_SIZE && prevY>=0 && prevY<SCREEN_SIZE) || (x>=0 & x<SCREEN_SIZE && y>=0 && y<SCREEN_SIZE)) || IntersectScreen(Point2D(prevX,prevY),Point2D(x,y))==true))
            {
                /* Draw line from (prevX, prevY) to (x, y).
                Flickers since we’re not using double buffering. */
                //XDrawLine(disp, win, gc, prevX, prevY, x, y);
                *DRAW_COLORS=colors[idx];
                line(prevX,prevY,x,y);
            }

            prevvalid=true;
        }

        ++idx;
    }

}

void aircraftviewupdate(Input *input)
{
    /* Infinite loop, though plane can drop and ruin the calculations. */
    //for (;;)
    {
        /* Angle calculations. */
        cos_forwardTilt = _cos(forwardTiltRadians);
        sin_forwardTilt = _sin(forwardTiltRadians);
        cos_compass = _cos(compassRadians);
        
        F += timeDelta * P;
        
        compassRadians +=   cos_sideTilt * timeDelta * F /
                            cos_forwardTilt + d /
                            cos_forwardTilt * sin_sideTilt * timeDelta;
        
        forwardTiltRadians += d * timeDelta * cos_sideTilt - timeDelta * F * sin_sideTilt;

        sideTiltRadians +=  (sin_sideTilt * d /
                             cos_forwardTilt * sin_forwardTilt + v + sin_forwardTilt /
                             cos_forwardTilt * F * cos_sideTilt) * timeDelta;

        drawworld(FPoint3D(airplaneX,airplaneY,airplaneZ),cos_compass,sin_compass,cos_forwardTilt,sin_forwardTilt,cos_sideTilt,sin_sideTilt);

        // these are updated after the calculations above for some reason?
        cos_sideTilt = _cos(sideTiltRadians);
        sin_sideTilt = _sin(sideTiltRadians);
        sin_compass = _sin(compassRadians);

        /* Update the display. */

        /*HUD. infoStr = 3 values: speed in knots, heading 0=N 90=E 180=S 270=W,
        altimeter in feet.*/

        {
            global::ostr->SetWidth(4);

            global::ostr->Clear();
            *global::ostr << "" << speedKnots;
            global::tp->Print("SPD",10,SCREEN_SIZE-16,3,PALETTE_WHITE);
            global::tp->Print(global::ostr->Buffer(),5,SCREEN_SIZE-8,global::ostr->TextLength(),PALETTE_WHITE);

            global::ostr->Clear();
            *global::ostr << "" << ((integerConvert = 9E3 + compassRadians * 57.3) % 0550);
            global::tp->Print("HDG",50,SCREEN_SIZE-16,3,PALETTE_WHITE);
            global::tp->Print(global::ostr->Buffer(),45,SCREEN_SIZE-8,global::ostr->TextLength(),PALETTE_WHITE);

            global::ostr->Clear();
            *global::ostr << "" << (int)airplaneZ;
            global::tp->Print("ALT",90,SCREEN_SIZE-16,3,PALETTE_WHITE);
            global::tp->Print(global::ostr->Buffer(),85,SCREEN_SIZE-8,global::ostr->TextLength(),PALETTE_WHITE);

            global::ostr->Clear();
            *global::ostr << "" << (int)((speed/15.)*100.);
            global::tp->Print("PWR",130,SCREEN_SIZE-16,3,PALETTE_WHITE);
            global::tp->Print(global::ostr->Buffer(),125,SCREEN_SIZE-8,global::ostr->TextLength(),PALETTE_WHITE);
        }

        /*Get key press.*/

        if(input->SameState(1)==false)
        {
            up_down=0;
            if(input->GamepadButtonDown(1,BUTTON_UP))
            {
                up_down=10;
            }
            else if(input->GamepadButtonDown(1,BUTTON_DOWN))
            {
                up_down=-10;
            }

            left_right=0;
            if(input->GamepadButtonDown(1,BUTTON_LEFT))
            {
                left_right=10;
            }
            else if(input->GamepadButtonDown(1,BUTTON_RIGHT))
            {
                left_right=-10;
            }

            if(input->GamepadButtonDown(1,BUTTON_1))
            {
                speed+=0.2;
                if(speed>15)
                {
                    speed=15;
                }
            }
            if(input->GamepadButtonDown(1,BUTTON_2))
            {
                speed-=0.2;
                if(speed<0)
                {
                    speed=0;
                }
            }
            //both buttons down - back to location selection
            if(input->GamepadButtonDown(1,BUTTON_1)==true && input->GamepadButtonDown(1,BUTTON_2)==true)
            {
                global::flying=false;
            }
            // button 1 and down - map view
            if(input->GamepadButtonDown(1,BUTTON_1)==true && input->GamepadButtonDown(1,BUTTON_DOWN)==true)
            {
                banksview=1;
                mapX=airplaneX;
                mapY=airplaneY;
                mapZ=25000;
                input->DetectChangeState(1);
            }
        }

        /* Airplane position and physics: gravity, no wind. */

        M += H * timeDelta;
        I = M / speedFeet;

        /* Update airplane position. */

        airplaneX += (R11 * speedFeet + R21 * M + R31 * X) * timeDelta;
        airplaneY += (R12 * speedFeet + I * M + R32 * X) * timeDelta;

        /* airplaneZ is positive upward, rotation matrix is negative upward Z. */

        airplaneZ += (-R13 * speedFeet - R23 * M - R33 * X) * timeDelta;
        m = 15 * F / speedFeet;
        E = .1 + X * 4.9 / speedFeet;
        T = X * X + speedFeet * speedFeet + M * M;
        t = T * m / 32 - I * T / 24;
        H = gravityAccel * R23 + v * X - F * speedFeet + t / S;

        accel = F * M + (speed * 1e4 / speedFeet - (T + E * 5 * T * E) / 3e2) / S - X * d - sin_forwardTilt * gravityAccel;
        speedFeet += accel * timeDelta;
        speedKnots = speedFeet / 1.7;

        /*infoStr = 3 values: speed in knots, heading 0=N 90=E 180=S 270=W,
        altimeter in feet.*/

        //sprintf(infoStr, "% 5d % 3d" "% 7d", speedKnots, (integerConvert = 9E3 + compassRadians * 57.3) % 0550, (int)airplaneZ);

        a = 2.63 / speedFeet * d;
        X +=    (d * speedFeet - T /
                S * (.19 * E + a * .64 + up_down / 1e3) 
                - M * v + gravityAccel * R33) 
                * timeDelta;
        W = d;
        d +=  T * (.45 - 14 / speedFeet * X - a * 130 - up_down * .14) 
                * timeDelta / 125e2 + F * timeDelta * v;

        D = v / speedFeet * 15;
        
        P = (T *
            (47 * I - m * 52 + E * 94 * D - t * .38 + left_right * .21 * E)
            / 1e2 + W * 179 * v) 
            / 2312;
        
        v -= (W * F - T * 
             (.63 * m - I * .086 + m * E * 19 - D * 25 - .11 * left_right) 
             / 107e2) 
             * timeDelta;
    }
}

void mapviewupdate(Input *input)
{
    /* Angle calculations. */
    cos_forwardTilt = 0;//_cos(-M_PI_2);
    sin_forwardTilt = -1;//_sin(-M_PI_2);
    cos_compass = 1;//_cos(0);
 
    drawworld(FPoint3D(mapX,mapY,mapZ),cos_compass,sin_compass,cos_forwardTilt,sin_forwardTilt,cos_sideTilt,sin_sideTilt);

    cos_sideTilt = 1;//_cos(0);
    sin_sideTilt = 0;//_sin(0);
    sin_compass = 0;//_sin(0);

    /* Update the display. */
    
    {
        global::ostr->SetWidth(4);

        global::ostr->Clear();
        *global::ostr << "MAP ALT " << (int)mapZ;
        global::tp->Print(global::ostr->Buffer(),1,1,global::ostr->TextLength(),PALETTE_WHITE);
    }

    /*Get key press.*/
    if(input->SameState(1)==false)
    {
        double movescale=_max(500,_min(25000.,mapZ))/50.; // the higher you are, the more the map moves camped to (500 - 25000)
        if(input->GamepadButtonDown(1,BUTTON_UP))
        {
            mapX+=movescale;
        }
        else if(input->GamepadButtonDown(1,BUTTON_DOWN))
        {
            mapX-=movescale;
        }

        if(input->GamepadButtonDown(1,BUTTON_LEFT))
        {
            mapY-=movescale;
        }
        else if(input->GamepadButtonDown(1,BUTTON_RIGHT))
        {
            mapY+=movescale;
        }

        if(input->GamepadButtonDown(1,BUTTON_1))
        {
            mapZ+=100;
        }
        if(input->GamepadButtonDown(1,BUTTON_2))
        {
            mapZ-=100;
            if(mapZ<0)
            {
                mapZ=0;
            }
        }
        //both buttons down - back to aircraft view
        if(input->GamepadButtonDown(1,BUTTON_1)==true && input->GamepadButtonDown(1,BUTTON_2)==true)
        {
            banksview=0;
            input->DetectChangeState(1);
        }
    }
}

void banksupdate(Input *input)
{
    switch(banksview)
    {
    case 0:
        aircraftviewupdate(input);
        break;
    case 1:
        mapviewupdate(input);
        break;
    }
}
